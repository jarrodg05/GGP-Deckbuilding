;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Sushi Go
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ROLES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role random)

(role p1)
(role p2)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INPUT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (input ?p (buy ?card)) (role ?p) (isCard ?card))
(<= (input ?p (playChopsticks ?card1 ?card2)) (role ?p) (isCard ?card1) (isCard ?card2))
(<= (input ?p noop) (role ?p))
(<= (input random (deal ?p ?card)) (role ?p) (isCard ?card))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; LEGAL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (legal ?player (buy ?card))
	(not (true (setup ?p ?x)))
	(true (hand ?player ?card ?count))
)

(<= (legal ?player (playChopsticks ?card1 ?card2))
	(not (true (setup ?p ?x)))
	(true (board ?p chopsticks))
	(true (hand ?player ?card1 ?count1))
	(true (hand ?player ?card2 ?count2))
	(distinct ?card1 ?card2)
)
(<= (legal ?player (playChopsticks ?card ?card))
	(not (true (setup ?p ?x)))
	(true (board ?p chopsticks))
	(true (hand ?player ?card ?count))
	(gte ?count 2)
)

(<= (legal random noop)
	(not (true (setup ?p ?x)))
)

(<= (legal ?player noop)
	(true (setup ?p ?x))
	(role ?player)
	(distinct ?player random)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SEES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; can see other players actions but wont know the hands

(<= (sees ?p (did ?otherP ?move))
	(role ?p)
	(does ?otherP ?move)
	(distinct ?otherP random)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BASE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (hand ?p ?card ?x) (role ?p) (isCard ?card) (number ?x)))
(<= (base (setup ?p ?x) (role ?p) (number ?x)))
(<= (base (round ?x) (number ?x)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(init (setup p1 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GAME SETUP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; to keep track of how many cards have been and should be dealt to each player
(<= (next (setup ?p ?next))
	(true (setup ?p ?curr))
	(succ ?curr ?next)
	(startHandSize ?size)
	(distinct ?curr ?size)
)

; to move the dealing to the next player 
(<= (next (setup ?p 1))
	(true (setup ?prevP ?size))
	(startHandSize ?size)
	(nextPlayer ?prevP ?p)
	(firstPlayer ?first)
	(distinct ?first ?p)

)

(<= (next (round 1))
	(true (setup ?prevP ?size))
	(startHandSize ?size)
	(nextPlayer ?prevP ?p)
	(firstPlayer ?p)
)

(<= (legal random (deal ?p ?card))
	(true (setup ?p ?x))
	(isCard ?card)
)

; first card of type
(<= (next (hand ?p ?card 1))
	(does random (deal ?p ?card))
	(not (true (hand ?p ?card ?x)))
)

; additional card of type 
(<= (next (hand ?p ?card ?count))
	(does random (deal ?p ?card))
	(true (hand ?p ?card ?curr))
	(succ ?curr ?count)
)

; keep the same count of other cards
(<= (next (hand ?p ?card ?count))
	(does random (deal ?p ?c))
	(true (hand ?p ?card ?count))
	(distinct ?card ?c)
)
(<= (next (hand ?p ?card ?count))
	(does random (deal ?otherP ?c))
	(true (hand ?p ?card ?count))
	(distinct ?p ?otherP)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; NEXT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (hand ?p ?card ?x))
	(does random noop)
	(nextPlayer ?prevP ?p)
	(true (hand ?prevP ?card ?x))
	(not (does ?prevP (buy ?card)))
)

(<= (next (hand ?p ?card ?x))
	(nextPlayer ?prevP ?p)
	(does ?prevP (buy ?card))
	(true (hand ?prevP ?card ?y))
	(succ ?x ?y)
	(distinct ?x 0)
)
(<= (next (hand ?p ?card ?x))
	(nextPlayer ?prevP ?p)
	(does ?prevP (buy ?otherCard))
	(true (hand ?prevP ?card ?x))
	(distinct ?card ?otherCard)
)

(<= (next (hand ?p chopsticks 1))
	(nextPlayer ?prevP ?p)
	(does ?prevP (playChopsticks ?card1 ?card2))
	(not (true (hand ?prevP chopsticks ?x)))
)
(<= (next (hand ?p chopsticks ?x))
	(nextPlayer ?prevP ?p)
	(does ?prevP (playChopsticks ?card1 ?card2))
	(true (hand ?prevP chopsticks ?y))
	(succ ?y ?x)
)
(<= (next (hand ?p ?card1 ?x))
	(nextPlayer ?prevP ?p)
	(does ?prevP (playChopsticks ?card1 ?card2))
	(true (hand ?prevP ?card1 ?y))
	(succ ?x ?y)
	(distinct ?x 0)
	(distinct ?card1 ?card2)
)
(<= (next (hand ?p ?card2 ?x))
	(nextPlayer ?prevP ?p)
	(does ?prevP (playChopsticks ?card1 ?card2))
	(true (hand ?prevP ?card2 ?y))
	(succ ?x ?y)
	(distinct ?x 0)
	(distinct ?card1 ?card2)
)
(<= (next (hand ?p ?card ?x))
	(nextPlayer ?prevP ?p)
	(does ?prevP (playChopsticks ?card ?card))
	(true (hand ?prevP ?card ?z))
	(succ ?y ?z)
	(succ ?x ?y)
	(distinct ?x 0)
)
(<= (next (hand ?p ?card ?x))
	(nextPlayer ?prevP ?p)
	(does ?prevP (playChopsticks ?card1 ?card2))
	(true (hand ?prevP ?card ?x))
	(distinct ?card ?card1)
	(distinct ?card ?card2)
	(distinct ?card chopsticks)
	(distinct ?card1 ?card2)
)

(<= (next (board ?p ?card ?x))
	(does ?p (buy ?otherCard))
	(true (board ?p ?card ?x))
	(distinct ?otherCard ?card)
)
(<= (next (board ?p ?card ?x))
	(does ?p (buy ?card))
	(true (board ?p ?card ?y))
	(succ ?y ?x)
)
(<= (next (board ?p ?card 1))
	(does ?p (buy ?card))
	(not (true (board ?p ?card ?x)))
)
(<= (next (board ?p chopsticks ?x))
	(does ?p (playChopsticks ?card1 ?card2))
	(true (board ?p chopsticks ?y))
	(succ ?x ?y)
	(distinct ?x 0)
)
(<= (next (board ?p ?card ?x))
	(does ?p (playChopsticks ?card ?card2))
	(distinct ?card ?card2)
	(true (board ?p ?card ?y))
	(succ ?y ?x)
)
(<= (next (board ?p ?card 1))
	(does ?p (playChopsticks ?card ?card2))
	(distinct ?card ?card2)
	(not (true (board ?p ?card ?y)))
)
(<= (next (board ?p ?card ?x))
	(does ?p (playChopsticks ?card1 ?card))
	(distinct ?card1 ?card)
	(true (board ?p ?card ?y))
	(succ ?y ?x)
)
(<= (next (board ?p ?card 1))
	(does ?p (playChopsticks ?card1 ?card))
	(distinct ?card1 ?card)
	(not (true (board ?p ?card ?y)))
)
(<= (next (board ?p ?card ?x))
	(does ?p (playChopsticks ?card ?card))
	(true (board ?p ?card ?z))
	(succ ?z ?y)
	(succ ?y ?x)
)
(<= (next (board ?p ?card 2))
	(does ?p (playChopsticks ?card ?card))
	(not (true (board ?p ?card ?x)))
)

(<= (next (round ?round))
	(true (round ?prevRound))
	(succ ?prevRound ?round)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GOALS & TERMINALS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(goal random 0)

(<= (goal ?p ?points)
	(distinct ?p random)
	(playerPoints ?p ?points)
)

;(<= (playerPoints ?p ?points)
;	(tempuraPoints ?p ?tempura)
;	(dumplingPoints ?p ?dumpling)
;	(true (wasabiPoints ?p ?wasabi))
;	(sashimiPoints ?p ?sashimi)
;	(nigiriPoints ?p ?nigiri)
;	(add ?dumpling ?wasabi ?tempura ?sub1)
;	(add ?sub1 ?nigiri ?sashimi ?points)
;)

(<= (playerPoints ?p ?points)
	(makiPoints ?p ?maki)
	(tempuraPoints ?p ?tempura)
	(sashimiPoints ?p ?sashimi)
	(dumplingPoints ?p ?dumpling)
	(nigiriPoints ?p ?nigiri)
	(true (wasabiPoints ?p ?wasabi))
	(add ?maki ?tempura ?sashimi ?sub1)
	(add ?dumpling ?nigiri ?wasabi ?sub2)
	(add ?sub1 ?sub2 ?points)
)

(<= terminal
	(true (round ?after))
	(endRound ?end)
	(succ ?end ?after)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CARDS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(isCard 3maki)
(isCard 2maki)
(isCard 1maki)
(isCard tempura)
(isCard sashimi)
(isCard dumpling)
(isCard squidNigiri)
(isCard salmonNigiri)
(isCard eggNigiri)
(isCard wasabi)
(isCard chopsticks)

(<= (makiPoints ?p 6)
	(mostMaki ?p)
)
(<= (makiPoints ?p 3)
	(secondMaki ?p)
)
(<= (makiPoints ?p 0)
	(not (mostMaki ?p))
	(not (secondMaki ?p))
)
(<= (notMostMaki ?p)
	(totalMaki ?p ?total)
	(totalMaki ?otherP ?highest)
	(distinct ?p ?otherP)
	(gte ?highest ?total)
)
(<= (mostMaki ?p)
	(role ?p)
	(not (notMostMaki ?p))
)
(<= (notTiedMaki ?p)
	(totalMaki ?p ?total)
	(totalMaki ?otherP ?highest)
	(distinct ?p ?otherP)
	(gt ?highest ?total)
)
(<= (notSecondMaki ?p)
	(totalMaki ?p ?total)
	(totalMaki ?otherP ?highest)
	(mostMaki ?most)
	(distinct ?otherP ?most)
	(gt ?highest ?total)
)
(<= (secondMaki ?p)
	(role ?p)
	(not (notTiedMaki ?p))
	(not (notSecondMaki ?p))
)
(<= (totalMaki ?p ?total)
	(3makiCount ?p ?3count)
	(2makiCount ?p ?2count)
	(1makiCount ?p ?1count)
	(multi ?3count 3 ?3total)
	(multi ?2count 2 ?2total)
	(add ?3total ?2total ?1count ?total)
)
(<= (3makiCount ?p ?count)
	(true (board ?p 3maki ?count))
)
(<= (3makiCount ?p 0)
	(role ?p)
	(not (true (board ?p 3maki ?count)))
)
(<= (2makiCount ?p ?count)
	(true (board ?p 2maki ?count))
)
(<= (2makiCount ?p 0)
	(role ?p)
	(not (true (board ?p 2maki ?count)))
)
(<= (1makiCount ?p ?count)
	(true (board ?p 1maki ?count))
)
(<= (1makiCount ?p 0)
	(role ?p)
	(not (true (board ?p 1maki ?count)))
)

(<= (tempuraPoints ?p ?points)
	(true (board ?p tempura ?count))
	(div ?count 2 ?pairs)
	(multi ?pairs 5 ?points)
)
(<= (tempuraPoints ?p 0)
	(role ?p)
	(not (true (board ?p tempura ?x)))
)

(<= (sashimiPoints ?p ?points)
	(true (board ?p sashimi ?count))
	(div ?count 3 ?sets)
	(multi ?sets 10 ?points)
)
(<= (sashimiPoints ?p 0)
	(role ?p)
	(not (true (board ?p sashimi ?x)))
)

(<= (dumplingPoints ?p 0)
	(role ?p)
	(not (true (board ?p dumpling ?x)))
)
(<= (dumplingPoints ?p 1)
	(true (board ?p dumpling 1))
)
(<= (dumplingPoints ?p 3)
	(true (board ?p dumpling 2))
)
(<= (dumplingPoints ?p 6)
	(true (board ?p dumpling 3))
)
(<= (dumplingPoints ?p 10)
	(true (board ?p dumpling 4))
)
(<= (dumplingPoints ?p 15)
	(true (board ?p dumpling ?x))
	(gte ?x 5)
)

(<= (nigiriPoints ?p ?points)
	(squidCount ?p ?squidCount)
	(salmonCount ?p ?salmonCount)
	(eggCount ?p ?eggCount)
	(multi ?squidCount 3 ?squidPoints)
	(multi ?salmonCount 2 ?salmonPoints)
	(add ?squidPoints ?salmonPoints ?eggCount ?points)
)
(<= (squidCount ?p ?count)
	(true (board ?p squidNigiri ?count))
)
(<= (squidCount ?p 0)
	(role ?p)
	(not (true (board ?p squidNigiri ?x)))
)
(<= (salmonCount ?p ?count)
	(true (board ?p salmonNigiri ?count))
)
(<= (salmonCount ?p 0)
	(role ?p)
	(not (true (board ?p salmonNigiri ?x)))
)
(<= (eggCount ?p ?count)
	(true (board ?p eggNigiri ?count))
)
(<= (eggCount ?p 0)
	(role ?p)
	(not (true (board ?p eggNigiri ?x)))
)

(<= (init (wasabiPoints ?p 0))
	(role ?p)
	(distinct ?p random)
)

(<= (next (wasabiPoints ?p ?points))
	(true (wasabiPoints ?p ?points))
	(not (does ?p (buy squidNigiri)))
	(not (does ?p (buy salmonNigiri)))
	(not (does ?p (buy eggNigiri)))
)
(<= (next (wasabiPoints ?p ?points))
	(true (freeWasabi ?p 0))
	(true (wasabiPoints ?p ?points))
)

(<= (init (freeWasabi ?p 0))
	(role ?p)
	(distinct ?p random)
)
(<= (next (freeWasabi ?p ?count))
	(does ?p (buy wasabi))
	(true (freeWasabi ?p ?prev))
	(succ ?prev ?count)
)
(<= (next (freeWasabi ?p ?count))
	(does ?p (buy squidNigiri))
	(true (freeWasabi ?p ?prev))
	(sub ?prev 1 ?count)
)
(<= (next (freeWasabi ?p ?count))
	(does ?p (buy salmonNigiri))
	(true (freeWasabi ?p ?prev))
	(sub ?prev 1 ?count)
)
(<= (next (freeWasabi ?p ?count))
	(does ?p (buy eggNigiri))
	(true (freeWasabi ?p ?prev))
	(sub ?prev 1 ?count)
)
(<= (next (freeWasabi ?p ?count))
	(true (freeWasabi ?p ?count))
	(not (does ?p (buy wasabi)))
	(not (does ?p (buy squidNigiri)))
	(not (does ?p (buy salmonNigiri)))
	(not (does ?p (buy eggNigiri)))
)

(<= (next (wasabiPoints ?p ?points))
	(true (freeWasabi ?p ?x))
	(distinct ?x 0)
	(does ?p (buy squidNigiri))
	(true (wasabiPoints ?p ?prev))
	(add ?prev 6 ?points)
)
(<= (next (wasabiPoints ?p ?points))
	(true (freeWasabi ?p ?x))
	(distinct ?x 0)
	(does ?p (buy salmonNigiri))
	(true (wasabiPoints ?p ?prev))
	(add ?prev 4 ?points)
)
(<= (next (wasabiPoints ?p ?points))
	(true (freeWasabi ?p ?x))
	(distinct ?x 0)
	(does ?p (buy eggNigiri))
	(true (wasabiPoints ?p ?prev))
	(add ?prev 2 ?points)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; STATIC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(firstPlayer p1)
(nextPlayer p1 p2)
(nextPlayer p2 p1)

(startHandSize 10)
(endRound 10) 

; add x y z := x+y == z
(<= (add 0 ?x ?x)
	(number ?x)
)
(<= (add ?x 0 ?x)
	(number ?x)
)
(<= (add ?x ?y ?sum)
	(succ ?x2 ?x)
	(succ ?y ?y2)
	(add ?x2 ?y2 ?sum)
)

; add x y z sum := x+y+z == sum
(<= (add ?x ?y ?z ?sum)
	(add ?x ?y ?partial)
	(add ?partial ?z ?sum)
)

; sub x y z := x-y == z 
(<= (sub ?x 0 ?x)
	(number ?x)
)
(<= (sub 0 ?x 0)
	(number ?x)
)
(<= (sub ?x ?y ?result)
	(succ ?x2 ?x)
	(succ ?y2 ?y)
	(sub ?x2 ?y2 ?result)
)
 
; div x y z := x // y == z
(<= (div 0 ?x 0)
	(number ?x)
)
(<= (div ?x ?y 0)
	(gt ?y ?x)
)
(<= (div ?x ?y ?result)
	(gt ?x ?y)
	(sub ?x ?y ?z)
	(gte ?z ?y)
	(div ?z ?y ?cumsum)
	(add ?cumsum 1 ?result)
)
(<= (div ?x ?y 1)
	(gte ?x ?y)
	(sub ?x ?y ?z)
	(gt ?y ?z)
)

; multi x y z := x * y == z
(<= (multi ?x 1 ?x)
	(number ?x)
)
(<= (multi 1 ?x ?x)
	(number ?x)
)
(<= (multi ?x ?y ?result)
	(succ ?z ?y)
	(multi ?x ?z ?cumsum)
	(add ?cumsum ?x ?result)
)
(<= (multi 0 ?x 0)
	(number ?x)
)
(<= (multi ?x 0 0)
	(number ?x)
)

; gt x y := x > y 
(<= (gt ?x ?y)
	(succ ?y ?x)
)
(<= (gt ?x ?y)
	(succ ?y ?z)
	(gt ?x ?z)
)

; gte x y := x <= y 
(<= (gte ?x ?x)
	(number ?x)
)
(<= (gte ?x ?y)
	(gt ?x ?y)
)

(<= (number ?x)
	(succ ?x ?y)
)
(<= (number ?x)
	(succ ?y ?x)
)

(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50) 