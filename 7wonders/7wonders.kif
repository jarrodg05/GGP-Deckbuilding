;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; 7 Wonders
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ROLES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role random)

(role p1)
(role p2)
(role p3)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INPUT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (input ?p (buy ?card (0))) (role ?p) (isCard ?card))
(<= (input ?p (buy ?card (?n1 ?c1 ?n2 ?c2))) (role ?p) (isCard ?card) (role ?n1) (?role ?n2) (number ?c1) (number ?c2))
(<= (input ?p (discard ?card)) (role ?p) (isCard ?card))
(<= (input ?p noop) (role ?p))
(<= (input random (deal ?p ?card)) (role ?p) (isCard ?card))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; LEGAL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (legal ?player (buy ?card 0))
	(not (true (setup ?p ?x)))
	(true (hand ?player ?card))
	(affordable ?player ?card)
)

(<= (legal ?player (discard ?card))
	(not (true (setup ?p ?x)))
	(true (hand ?player ?card))
)

(<= (legal random noop)
	(not (true (setup ?p ?x)))
)

(<= (legal ?player noop)
	(true (setup ?p ?x))
	(role ?player)
	(distinct ?player random)
)

(<= (legal ?player noop)
	(true checkArmy)
	(role ?player)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SEES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; can see other players actions but wont know the hands

(<= (sees ?p (did ?otherP ?move))
	(role ?p)
	(does ?otherP ?move)
	(distinct ?otherP random)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BASE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (hand ?p ?card)) (role ?p) (isCard ?card))
(<= (base (setup ?p ?x)) (role ?p) (number ?x))
(<= (base (round ?x)) (number ?x))
(<= (base (currentAge ?x)) (number ?x))

(<= (base (coins ?p ?x)) (role ?p) (number ?x))
(<= (base (owns ?resource ?p ?x)) (permamentResource ?resource) (role ?p) (number ?x))
(<= (base (type ?cardType ?p ?x)) (cardTypes ?cardType) (role ?p) (number ?x))
(<= (base (wins ?p ?x)) (role ?p) (number ?x))
(<= (base (losses ?p ?x)) (role ?p) (number ?x))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(init (setup p1 1))
(init (currentAge 1))

(<= (init (coins ?p 3))
	(role ?p)
	(distinct ?p random)
)

(<= (init (owns ?resource ?p 0))
	(permamentResource ?resource)
	(role ?p)
	(distinct ?p random)
)

(<= (init (type ?cardType ?p 0))
	(cardTypes ?cardType)
	(role ?p)
	(distinct ?p random)
)

(<= (init (wins ?p 0))
	(role ?p)
	(distinct ?p random)
)

(<= (init (losses ?p 0))
	(role ?p)
	(distinct ?p random)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GAME SETUP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; to keep track of how many cards have been and should be dealt to each player
(<= (next (setup ?p ?next))
	(true (setup ?p ?curr))
	(succ ?curr ?next)
	(startHandSize ?size)
	(distinct ?curr ?size)
)

; to move the dealing to the next player 
(<= (next (setup ?p 1))
	(true (setup ?prevP ?size))
	(startHandSize ?size)
	(nextPlayer ?prevP ?p)
	(firstPlayer ?first)
	(distinct ?first ?p)

)

(<= (next (round 1))
	(true (setup ?prevP ?size))
	(startHandSize ?size)
	(nextPlayer ?prevP ?p)
	(firstPlayer ?p)
)

(<= (legal random (deal ?p ?card))
	(true (setup ?p ?x))
	(canDeal ?card)
)

(<= (canDeal ?card)
	(true (currentAge ?age))
	(age ?card ?age)
	(not (true (hand ?p ?card)))
)

; add card to hand
(<= (next (hand ?p ?card))
	(does random (deal ?p ?card))
)

; keep the same count of other cards
(<= (next (hand ?p ?card))
	(does random (deal ?p ?c))
	(true (hand ?p ?card))
	(distinct ?card ?c)
)
(<= (next (hand ?p ?card))
	(does random (deal ?otherP ?c))
	(true (hand ?p ?card))
	(distinct ?p ?otherP)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; NEXT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; pass hand to next player
(<= (next (hand ?p ?card))
	(does random noop)
	(nextPlayer ?prevP ?p)
	(true (hand ?prevP ?card))
	(not (does ?prevP (buy ?card ?x)))
	(not (does ?prevP (discard ?card)))
	(not (finalRound))
)

(<= (next (board ?p ?card))
	(true (board ?p ?card))
)
(<= (next (board ?p ?card))
	(does ?p (buy ?card ?x))
)


;(<= (next (board ?p ?card))
;	(does ?p (buy ?card ?neighbour ?coins))
;)
;(<= (next (board ?p ?card))
;	(does ?p (buy ?card ?neighbour ?coins ?n2 ?c2))
;)

(<= (next (round ?round))
	(true (round ?prevRound))
	(succ ?prevRound ?round)
	(not (finalRound))
)


(<= (next (coins ?p ?num))
	(true (coins ?p ?prev))
	(spentCoins ?p ?spent)
	(gainedCoins ?p ?gained)
	(add ?prev ?gained ?partial)
	(sub ?partial ?spent ?num)
)

(<= (next (owns ?resource ?p ?num))
	(true (owns ?resource ?p ?num))
	(permamentResource ?resource)
	(not (does ?p (buy ?card ?x)))
)
(<= (next (owns ?resource ?p ?total))
	(true (owns ?resource ?p ?prev))
	(permamentResource ?resource)
	(does ?p (buy ?card ?x))
	(provides ?card ?resource ?num)
	(add ?prev ?num ?total)
)
(<= (next (owns ?resource ?p ?num))
	(true (owns ?resource ?p ?num))
	(permamentResource ?resource)
	(does ?p (buy ?card ?x))
	(not (provides ?card ?resource ?y))
)



(<= (next (type ?cardType ?p ?num))
	(true (type ?cardType ?p ?num))
	(cardTypes ?cardType)
	(not (does ?p (buy ?card ?x)))
)
(<= (next (type ?cardType ?p ?num))
	(true (type ?cardType ?p ?prev))
	(does ?p (buy ?card ?x))
	(cardType ?card ?cardType)
	(succ ?prev ?num)
)
(<= (next (type ?cardType ?p ?num))
	(true (type ?cardType ?p ?num))
	(does ?p (buy ?card ?x))
	(cardType ?card ?type)
	(distinct ?type ?cardType)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GOALS & TERMINALS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(goal random 0)

(<= (goal ?p ?points)
	(distinct ?p random)
	(playerPoints ?p ?points)
)


(<= terminal
	(true (currentAge 4))
)


(<= (playerPoints ?p ?points)
	(sciencePoints ?p ?science)
	(warPoints ?p ?war)
	(guildPoints ?p ?guild)
	(coinPoints ?p ?coins)
	(true (owns victory ?p ?victory))
	(add ?science ?war ?guild ?partial)
	(add ?victory ?partial ?points)
)


(scienceScaling 0 0)
(scienceScaling 1 1)
(scienceScaling 2 4)
(scienceScaling 3 9)
(scienceScaling 4 16)
(scienceScaling 5 25)


(<= (sciencePoints ?p ?points)
	(mathsPoints ?p ?maths)
	(gearsPoints ?p ?gears)
	(tabletPoints ?p ?tablets)
	(add ?maths ?gears ?tablets ?points)
)

(<= (mathsPoints ?p ?points)
	(true (owns maths ?p ?num))
	(scienceScaling ?num ?points)
)
(<= (gearsPoints ?p ?points)
	(true (owns gears ?p ?num))
	(scienceScaling ?num ?points)
)
(<= (tabletPoints ?p ?points)
	(true (owns tablets ?p ?num))
	(scienceScaling ?num ?points)
)

(<= (warPoints ?p ?points)
	(true (wins ?p ?wins))
	(true (losses ?p ?losses))
	(sub ?wins ?losses ?points)
)

(<= (guildPoints ?p ?points)
	(workersPoints ?p ?workers)
	(craftsmenPoints ?p ?craftsmen)
	(tradersPoints ?p ?traders)
	(philosophersPoints ?p ?philosophers)
	(spyPoints ?p ?spy)
	(strategyPoints ?p ?strategy)
	(magistratesPoints ?p ?magistrates)
	(add ?workers ?craftsmen ?traders ?partial)
	(add ?philosophers ?spy ?strategy ?partial1)
	(add ?magistrates ?partial ?partial1 ?points)
)

(<= (workersPoints ?p 0)
	(not (true (board ?p workersGuild)))
)
(<= (craftsmenPoints ?p 0)
	(not (true (board ?p craftsmensGuild)))
)
(<= (tradersPoints ?p 0)
	(not (true (board ?p tradersGuild)))
)
(<= (philosophersPoints ?p 0)
	(not (true (board ?p philosophersGuild)))
)
(<= (spyPoints ?p 0)
	(not (true (board ?p spyGuild)))
)
(<= (strategyPoints ?p 0)
	(not (true (board ?p strategyGuild)))
)
(<= (magistratesPoints ?p 0)
	(not (true (board ?p magistratesGuild)))
)

(<= (workersPoints ?p ?points)
	(true (board ?p workersGuild))
	(guild workersGuild ?p ?points)
)
(<= (craftsmenPoints ?p ?points)
	(true (board ?p craftsmensGuild))
	(guild craftsmensGuild ?p ?points)
)
(<= (tradersPoints ?p ?points)
	(true (board ?p tradersGuild))
	(guild tradersGuild ?p ?points)
)
(<= (philosophersPoints ?p ?points)
	(true (board ?p philosophersGuild))
	(guild philosophersGuild ?p ?points)
)
(<= (spyPoints ?p ?points)
	(true (board ?p spyGuild))
	(guild spyGuild ?p ?points)
)
(<= (strategyPoints ?p ?points)
	(true (board ?p strategyGuild))
	(guild strategyGuild ?p ?points)
)
(<= (magistratesPoints ?p ?points)
	(true (board ?p magistratesGuild))
	(guild magistratesGuild ?p ?points)
)


(<= (coinPoints ?p ?points)
	(true (coins ?p ?coins))
	(div ?coins 3 ?points)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; END OF AGE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (currentAge ?next))
	(true checkArmy)
	(true (currentAge ?current))
	(succ ?current ?next)
)
(<= (next (currentAge ?age))
	(true (currentAge ?age))
	(not (true checkArmy))
)

(<= (finalRound)
	(true (round ?current))
	(endRound ?current)
)

(<= (next checkArmy)
	(finalRound)
)

(<= (next (setup p1 1))
	(true checkArmy)
)

; no wins if ties or lower with both neighbours
(<= (next (wins ?p ?num))
	(true checkArmy)
	(true (wins ?p ?num))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(gte ?left ?army)
	(gte ?right ?army)
)

; beat one neighbour 
(<= (next (wins ?p ?total))
	(true checkArmy)
	(true (wins ?p ?prevWins))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(not (gte ?left ?army))
	(gte ?right ?army)
	(true (currentAge ?age))
	(armyAgeScaling ?age ?mulitplier)
	(add ?mulitplier ?prevWins ?total)
)
(<= (next (wins ?p ?total))
	(true checkArmy)
	(true (wins ?p ?prevWins))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(gte ?left ?army)
	(not (gte ?right ?army))
	(true (currentAge ?age))
	(armyAgeScaling ?age ?mulitplier)
	(add ?mulitplier ?prevWins ?total)
)

; beat both neighbours
(<= (next (wins ?p ?total))
	(true checkArmy)
	(true (wins ?p ?prevWins))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(not (gte ?left ?army))
	(not (gte ?right ?army))
	(true (currentAge ?age))
	(armyAgeScaling ?age ?mulitplier)
	(multi 2 ?mulitplier ?wins)
	(add ?wins ?prevWins ?total)
)

; only count at age end
(<= (next (wins ?p ?wins))
	(not (true checkArmy))
	(true (wins ?p ?wins))
)

(armyAgeScaling 1 1)
(armyAgeScaling 2 3)
(armyAgeScaling 3 5)


; no losses if ties or lower with both neighbours
(<= (next (losses ?p ?num))
	(true checkArmy)
	(true (losses ?p ?num))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(gte ?army ?left)
	(gte ?army ?right)
)

; lost to one neighbour 
(<= (next (losses ?p ?total))
	(true checkArmy)
	(true (losses ?p ?prevlosses))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(not (gte ?army ?left))
	(gte ?army ?right)
	(succ ?prevlosses ?total)
)
(<= (next (losses ?p ?total))
	(true checkArmy)
	(true (losses ?p ?prevlosses))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(gte ?army ?left)
	(not (gte ?army ?right))
	(succ ?prevlosses ?total)
)

; lost to both neighbours
(<= (next (losses ?p ?total))
	(true checkArmy)
	(true (losses ?p ?prevlosses))
	(true (owns army ?p ?army))
	(true (owns army ?nextP ?left))
	(true (owns army ?prevP ?right))
	(nextPlayer ?p ?nextP)
	(nextPlayer ?prevP ?p)
	(not (gte ?army ?left))
	(not (gte ?army ?right))
	(add ?prevlosses 2 ?total)
)

; only count at age end
(<= (next (losses ?p ?losses))
	(not (true checkArmy))
	(true (losses ?p ?losses))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CARDS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; AGE 1 Cards 
;;;;;;;;;;;;;;;;;;;;;;;;;;

(isCard lumberYard)
(isCard stonePit)
(isCard clayPool)
(isCard oreVein)
(isCard clayPit)
(isCard timberYard)
(isCard loom)
(isCard glassworks)
(isCard press)
(isCard baths)
(isCard altar)
(isCard theater)
(isCard eastTradingPost)
(isCard westTradingPost)
(isCard marketplace)
(isCard stockade)
(isCard barracks) 
(isCard guardTower)
(isCard apothecary)
(isCard workshop)
(isCard scriptorium)
(isCard tavern)

(resourceCost baths stone 1)
(resourceCost stockade wood 1)
(resourceCost barracks ore 1)
(resourceCost guardTower brick 1)
(resourceCost apothecary cloth 1)
(resourceCost workshop glass 1)
(resourceCost scriptorium script 1)
(resourceCost clayPit coins 1)
(resourceCost timberYard coins 1)

(provides lumberYard wood 1)
(provides stonePit stone 1)
(provides clayPool brick 1)
(provides oreVein ore 1)
(provides loom cloth 1)
(provides glassworks glass 1)
(provides press script 1)
(provides baths victory 3)
(provides altar victory 2)
(provides theater victory 2)
(provides stockade army 1)
(provides barracks army 1)
(provides guardTower army 1)
(provides apothecary maths 1)
(provides workshop gears 1)
(provides scriptorium tablet 1)
(provides tavern coins 5)

(choice clayPit brick ore)
(choice timberYard stone wood)

;(<= (next (eastTrading ?p))
;	(does ?p (buy eastTradingPost ?x))
;)
;(<= (next (eastTrading ?p))
;	(true (eastTrading ?p))
;)
;(<= (next (westTrading ?p))
;	(does ?p (buy westTradingPost ?x))
;)
;(<= (next (westTrading ?p))
;	(true (westTrading ?p))
;)
;(<= (next (market ?p))
;	(does ?p (buy marketplace ?x))
;)
;(<= (next (market ?p))
;	(true (market ?p))
;)

(<= (eastTrading ?p)
	(board ?p eastTradingPost)
)
(<= (westTrading ?p)
	(board ?p westTradingPost)
)
(<= (market ?p)
	(board ?p marketplace)
)

(age lumberYard 1)
(age stonePit 1)
(age clayPool 1)
(age oreVein 1)
(age clayPit 1)
(age timberYard 1)
(age loom 1)
(age glassworks 1)
(age press 1)
(age baths 1)
(age altar 1)
(age theater 1)
(age eastTradingPost 1)
(age westTradingPost 1)
(age marketplace 1)
(age stockade 1)
(age barracks 1)  
(age guardTower 1)
(age apothecary 1)
(age workshop 1)
(age scriptorium 1)
(age tavern 1)

(cardType lumberYard resource)
(cardType stonePit resource)
(cardType clayPool resource)
(cardType oreVein resource)
(cardType clayPit resource)
(cardType timberYard resource)
(cardType loom craft)
(cardType glassworks craft)
(cardType press craft)
(cardType baths score)
(cardType altar score)
(cardType theater score)
(cardType eastTradingPost merchant)
(cardType westTradingPost merchant)
(cardType marketplace merchant)
(cardType stockade war)
(cardType barracks war) 
(cardType guardTower war)
(cardType apothecary science)
(cardType workshop science)
(cardType scriptorium science)
(cardType tavern merchant)

;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;; AGE 2 cards
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(isCard sawmill)
(isCard quarry)
(isCard brickyard)
(isCard foundry)
(isCard loom2)
(isCard glassworks2)
(isCard press2)
(isCard aqueduct)
(isCard temple)
(isCard statue)
(isCard courthouse)
(isCard forum)
(isCard caravansery)
(isCard vineyard)
(isCard bazaar)
(isCard walls)
(isCard stables)
(isCard archeryRange)
(isCard dispensary)
(isCard laboratory)
(isCard library)
(isCard school)

(resourceCost sawmill coins 1)
(resourceCost quarry coins 1)
(resourceCost brickyard coins 1)
(resourceCost foundry coins 1)
(resourceCost aqueduct stone 3)
(resourceCost temple wood 1)
(resourceCost temple brick 1)
(resourceCost temple glass 1)
(resourceCost statue ore 2)
(resourceCost statue wood 1)
(resourceCost courthouse brick 2)
(resourceCost courthouse cloth 1)
(resourceCost forum brick 2)
(resourceCost caravansery wood 2)
(resourceCost walls stone 3)
(resourceCost stables ore 1)
(resourceCost stables brick 1)
(resourceCost stables wood 1)
(resourceCost archeryRange wood 2)
(resourceCost archeryRange ore 1)
(resourceCost dispensary ore 2)
(resourceCost dispensary glass 1)
(resourceCost laboratory brick 2)
(resourceCost laboratory script 1)
(resourceCost library stone 2)
(resourceCost library cloth 1)
(resourceCost school wood 1)
(resourceCost school script 1)

(provides sawmill wood 2)
(provides quarry stone 2)
(provides brickyard brick 2)
(provides foundry ore 2)
(provides loom2 cloth 1)
(provides glassworks2 glass 1)
(provides press2 script 1)
(provides aqueduct victory 5)
(provides temple victory 3)
(provides statue victory 4)
(provides courthouse victory 4)
(provides walls army 2)
(provides stables army 2)
(provides archeryRange army 2)
(provides dispensary maths 1)
(provides laboratory gears 1)
(provides library tablet 1)
(provides school tablet 1)

(<= (provides vineyard coins ?p ?total)
	(type resource ?p ?num)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(type resource ?next ?num1)
	(type resource ?prev ?num2)
	(add num ?num1 ?num2 ?total)
)
(<= (provides bazaar coins ?p ?coins)
	(type craft ?p ?num)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(type craft ?next ?num1)
	(type craft ?prev ?num2)
	(add ?num ?num1 ?num2 ?total)
	(multi ?total 2 ?coins)
)



(choice forum cloth glass script)
(choice caravansery brick stone ore wood)

(age sawmill 2)
(age quarry 2)
(age brickyard 2)
(age foundry 2)
(age loom2 2)
(age glassworks2 2)
(age press2 2)
(age aqueduct 2)
(age temple 2)
(age statue 2)
(age courthouse 2)
(age forum 2)
(age caravansery 2)
(age vineyard 2)
(age bazaar 2)
(age walls 2)
(age stables 2)
(age archeryRange 2)
(age dispensary 2)
(age laboratory 2)
(age library 2)
(age school 2)

(cardType sawmill resource)
(cardType quarry resource)
(cardType brickyard resource)
(cardType foundry resource)
(cardType loom2 craft)
(cardType glassworks2 craft)
(cardType press2 craft)
(cardType aqueduct score)
(cardType temple score)
(cardType statue score)
(cardType courthouse score)
(cardType forum merchant)
(cardType caravansery merchant)
(cardType vineyard merchant) 
(cardType bazaar merchant)
(cardType walls war)
(cardType stables war)
(cardType archeryRange war)
(cardType dispensary science)
(cardType laboratory science)
(cardType library science)
(cardType school science)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; AGE 3 CARDS 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(isCard pantheon)
(isCard gardens)
(isCard townHall)
(isCard palace)
(isCard senate)
(isCard haven)
(isCard lighthouse)
(isCard fortifications)
(isCard arsenal)
(isCard siegeWorkshop)
(isCard lodge)
(isCard observatory)
(isCard university)
(isCard academy)
(isCard study)
(isCard workersGuild)
(isCard craftsmensGuild)
(isCard tradersGuild)
(isCard philosophersGuild)
(isCard spyGuild)
(isCard strategyGuild)
(isCard magistratesGuild)

(resourceCost pantheon brick 2)
(resourceCost pantheon ore 1)
(resourceCost pantheon script 1)
(resourceCost pantheon cloth 1)
(resourceCost pantheon glass 1)

(resourceCost gardens brick 2)
(resourceCost gardens wood 1)

(resourceCost townHall stone 2)
(resourceCost townHall ore 1)
(resourceCost townHall glass 1)

(resourceCost palace brick 1)
(resourceCost palace wood 1)
(resourceCost palace ore 1)
(resourceCost palace stone 1)
(resourceCost palace glass 1)
(resourceCost palace script 1)
(resourceCost palace cloth 1)

(resourceCost senate wood 2)
(resourceCost senate ore 1)
(resourceCost senate stone 1)

(resourceCost haven ore 1)
(resourceCost haven wood 1)
(resourceCost haven cloth 1)

(resourceCost lighthouse stone 1)
(resourceCost lighthouse glass 1)

(resourceCost fortifications ore 3)
(resourceCost fortifications stone 1)

(resourceCost arsenal ore 1)
(resourceCost arsenal wood 2)
(resourceCost arsenal cloth 1)

(resourceCost siegeWorkshop wood 1)
(resourceCost siegeWorkshop brick 3)

(resourceCost lodge brick 2)
(resourceCost lodge cloth 1)
(resourceCost lodge script 1)

(resourceCost observatory ore 2)
(resourceCost observatory glass 1)
(resourceCost observatory cloth 1)

(resourceCost university wood 2)
(resourceCost university script 1)
(resourceCost university glass 1)

(resourceCost academy stone 3)
(resourceCost academy glass 1)

(resourceCost study wood 1)
(resourceCost study script 1)
(resourceCost study cloth 1)

(resourceCost workersGuild ore 2)
(resourceCost workersGuild brick 1)
(resourceCost workersGuild stone 1)
(resourceCost workersGuild wood 1)

(resourceCost craftsmensGuild ore 2)
(resourceCost craftsmensGuild stone 2)

(resourceCost tradersGuild cloth 1)
(resourceCost tradersGuild script 1)
(resourceCost tradersGuild glass 1)

(resourceCost philosophersGuild brick 3)
(resourceCost philosophersGuild cloth 1)
(resourceCost philosophersGuild script 1)

(resourceCost spyGuild brick 3)
(resourceCost spyGuild glass 1)

(resourceCost strategyGuild ore 2)
(resourceCost strategyGuild stone 1)
(resourceCost strategyGuild cloth 1)

(resourceCost magistratesGuild wood 3)
(resourceCost magistratesGuild stone 1)
(resourceCost magistratesGuild cloth 1)


(provides pantheon victory 7)
(provides gardens victory 5)
(provides townHall victory 6)
(provides palace victory 8)
(provides senate victory 6)
(provides fortifications army 3)
(provides arsenal army 3)
(provides siegeWorkshop army 3)
(provides lodge maths 1)
(provides observatory gears 1)
(provides university tablet 1)
(provides academy maths 1)
(provides study gears 1)

(<= (provides haven victory ?p ?num)
	(type resource ?p ?num)
)
(<= (provides haven coins ?p ?num)
	(type resource ?p ?num)
)
(<= (provides lighthouse victory ?p ?num)
	(type resource ?p ?num)
)
(<= (provides lighthouse coins ?p ?num)
	(type resource ?p ?num)
)

(age pantheon 3)
(age gardens 3)
(age townHall 3)
(age palace 3)
(age senate 3)
(age haven 3)
(age lighthouse 3)
(age fortifications 3)
(age arsenal 3)
(age siegeWorkshop 3)
(age lodge 3)
(age observatory 3)
(age university 3)
(age academy 3)
(age study 3)
(age workersGuild 3)
(age craftsmensGuild 3)
(age tradersGuild 3)
(age philosophersGuild 3)
(age spyGuild 3)
(age strategyGuild 3)
(age magistratesGuild 3)

(cardType pantheon score)
(cardType gardens score)
(cardType townHall score)
(cardType palace score)
(cardType senate score)
(cardType haven merchant)
(cardType lighthouse merchant)
(cardType fortifications war)
(cardType arsenal war)
(cardType siegeWorkshop war)
(cardType lodge science)
(cardType observatory science)
(cardType university science)
(cardType academy science)
(cardType study science)
(cardType workersGuild guild)
(cardType craftsmensGuild guild)
(cardType tradersGuild guild)
(cardType philosophersGuild guild)
(cardType spyGuild guild)
(cardType strategyGuild guild)
(cardType magistratesGuild guild)

(<= (guild workersGuild ?p ?total)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(true (type resource ?next ?num1))
	(true (type resource ?prev ?num2))
	(add ?num1 ?num2 ?total)
)
(<= (guild craftsmensGuild ?p ?points)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(true (type craft ?next ?num1))
	(true (type craft ?prev ?num2))
	(add ?num1 ?num2 ?total)
	(multi ?total 2 ?points)
)
(<= (guild tradersGuild ?p ?total)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(true (type merchant ?next ?num1))
	(true (type merchant ?prev ?num2))
	(add ?num1 ?num2 ?total)
)
(<= (guild philosophersGuild ?p ?total)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(true (type science ?next ?num1))
	(true (type science ?prev ?num2))
	(add ?num1 ?num2 ?total)
)
(<= (guild spyGuild ?p ?total)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(true (type war ?next ?num1))
	(true (type war ?prev ?num2))
	(add ?num1 ?num2 ?total)
)
(<= (guild magistratesGuild ?p ?total)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(true (type score ?next ?num1))
	(true (type score ?prev ?num2))
	(add ?num1 ?num2 ?total)
)
(<= (guild strategyGuild ?p ?total)
	(nextPlayer ?p ?next)
	(nextPlayer ?prev ?p)
	(true (losses ?next ?num1))
	(true (losses ?prev ?num2))
	(add ?num1 ?num2 ?total)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(permamentResource victory)
(permamentResource army)
(permamentResource wood)
(permamentResource stone)
(permamentResource ore)
(permamentResource brick)
(permamentResource cloth)
(permamentResource glass)
(permamentResource script)
(permamentResource maths)
(permamentResource tablets)
(permamentResource gears)

(cardTypes resource)
(cardTypes craft)
(cardTypes score)
(cardTypes merchant)
(cardTypes war)
(cardTypes science)
(cardTypes guild)





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; VIEW
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (spentCoins ?p ?num)
	(does ?p (buy ?card 0))
	(resourceCost ?card coins ?num)
)
;(<= (spentCoins ?p ?spent)
;	(does ?p (buy ?card (?neighbour ?spent)))
;)
(<= (spentCoins ?p ?spent)
	(does ?p (buy ?card (?neighbour ?coins ?n2 ?c2)))
	(add ?coins ?c2 ?spent)
)
(<= (spentCoins ?p 0)
	(not (does ?p (buy ?card ?x)))
)
(<= (spentCoins ?p 0)
	(does ?p (buy ?card 0))
	(not (resourceCost ?card coins ?num))
)

(<= (gainedCoins ?p ?num)
	(does ?p (discard ?card))
	(givenCoins ?p ?given)
	(add 3 ?given ?num)
)

(<= (gainedCoins ?p ?coins)
	(not (does ?p (discard ?card)))
	(givenCoins ?p ?coins)
)

;no neighbour gives coins
(<= (givenCoins ?p 0)
	(role ?p)
;	(not (does ?otherP (buy ?c ?p ?coins)))
	(not (does ?otherP (buy ?c (?p ?coins ?n2 ?c2))))
	(not (does ?otherP (buy ?c (?n ?coins ?p ?c2))))
)

;only 1 neighbour gives coins
;(<= (givenCoins ?p ?coins)
;	(does ?otherP (buy ?c ?p ?coins))
;	(not (does ?thirdP (buy ?cx ?p ?c1)))
;	(not (does ?thirdP (buy ?cx ?p ?c1 ?n2 ?c2)))
;	(not (does ?thirdP (buy ?cx ?n ?c1 ?p ?c2)))
;	(distinct ?thirdP ?otherP)
;)
(<= (givenCoins ?p ?coins)
	(does ?otherP (buy ?card (?p ?coins ?neighbour2 ?coins2)))
;	(not (does ?thirdP (buy ?c ?p ?c1)))
	(not (does ?thirdP (buy ?c (?p ?c1 ?n2 ?c2))))
	(not (does ?thirdP (buy ?c (?n ?c1 ?p ?c2))))
	(distinct ?thirdP ?otherP)
)
(<= (givenCoins ?p ?coins)
	(does ?otherP (buy ?card (?neighbour ?coins1 ?p ?coins)))
;	(not (does ?thirdP (buy ?c ?p ?c1)))
	(not (does ?thirdP (buy ?c (?p ?c1 ?n2 ?c2))))
	(not (does ?thirdP (buy ?c (?n ?c1 ?p ?c2))))
	(distinct ?thirdP ?otherP)
)

;both neighbours give coins
;(<= (givenCoins ?p ?given)
;	(does ?otherP (buy ?card1 ?p ?coins1))
;	(does ?thirdP (buy ?card2 ?p ?coins2))
;	(distinct ?otherP ?thirdP)
;	(add ?coins1 ?coins2 ?given)
;)
;(<= (givenCoins ?p ?given)
;	(does ?otherP (buy ?card1 ?p ?coins1))
;	(does ?thirdP (buy ?card2 ?p ?coins2 ?n ?c))
;	(distinct ?otherP ?thirdP)
;	(add ?coins1 ?coins2 ?given)
;)
;(<= (givenCoins ?p ?given)
;	(does ?otherP (buy ?card1 ?p ?coins1))
;	(does ?thirdP (buy ?card2 ?n ?c ?p ?coins2))
;	(distinct ?otherP ?thirdP)
;	(add ?coins1 ?coins2 ?given)
;)
(<= (givenCoins ?p ?given)
	(does ?thirdP (buy ?card1 (?p ?coins1 ?n ?c)))
	(does ?thirdP (buy ?card2 (?p ?coins2 ?n2 ?c2)))
	(distinct ?otherP ?thirdP)
	(add ?coins1 ?coins2 ?given)
)
(<= (givenCoins ?p ?given)
	(does ?thirdP (buy ?card1 (?p ?coins1 ?n ?c)))
	(does ?thirdP (buy ?card2 (?n2 ?c2 ?p ?coins2)))
	(distinct ?otherP ?thirdP)
	(add ?coins1 ?coins2 ?given)
)
(<= (givenCoins ?p ?given)
	(does ?thirdP (buy ?card1 (?n1 ?c1 ?p ?coins1)))
	(does ?thirdP (buy ?card2 (?n2 ?c2 ?p ?coins2)))
	(distinct ?otherP ?thirdP)
	(add ?coins1 ?coins2 ?given)
)


; affordable currently hard-coded for the set of cards being used (in regards to the cards offering a choice of resource)

; can afford with no coins or choice cards
(<= (affordable ?p ?card)
	(lackingWood ?p ?card 0)
	(lackingStone ?p ?card 0)
	(lackingOre ?p ?card 0)
	(lackingBrick ?p ?card 0)
	(lackingCloth ?p ?card 0)
	(lackingGlass ?p ?card 0)
	(lackingScript ?p ?card 0)
	(affordCoin ?p ?card)
)
; can afford with no coins but uses choice cards
(<= (affordable ?p ?card)
	(lackingWood ?p ?card ?wood)
	(lackingStone ?p ?card ?stone)
	(lackingOre ?p ?card ?ore)
	(lackingBrick ?p ?card ?brick)
	(lackingCloth ?p ?card ?cloth)
	(lackingGlass ?p ?card ?glass)
	(lackingScript ?p ?card ?script)	
	(affordCoin ?p ?card)
	(add ?cloth ?glass ?script ?craft)
	(craftAfford ?p ?craft)
	(add ?wood ?stone ?timber)
	(add ?brick ?ore ?clay)
	(resourceAfford ?p ?timber ?clay)
)

(<= (affordCoin ?p ?card)
	(not (resourceCost ?card coins ?num))
	(role ?p)
)
(<= (affordCoin ?p ?card)
	(resourceCost ?card coins ?cost)
	(true (coins ?p ?coins))
	(gte ?coins ?cost)
)

(<= (lackingWood ?p ?card ?lacking)
	(true (owns wood ?p ?owned))
	(resourceCost ?card wood ?cost)
	(sub ?cost ?owned ?lacking)
)
(<= (lackingWood ?p ?card 0)
	(not (resourceCost ?card wood ?cost))
	(role ?p)
	(isCard ?card)
)

(<= (lackingStone ?p ?card ?lacking)
	(true (owns stone ?p ?owned))
	(resourceCost ?card stone ?cost)
	(sub ?cost ?owned ?lacking)
)
(<= (lackingStone ?p ?card 0)
	(not (resourceCost ?card stone ?cost))
	(role ?p)
	(isCard ?card)
)

(<= (lackingOre ?p ?card ?lacking)
	(true (owns ore ?p ?owned))
	(resourceCost ?card ore ?cost)
	(sub ?cost ?owned ?lacking)
)
(<= (lackingOre ?p ?card 0)
	(not (resourceCost ?card ore ?cost))
	(role ?p)
	(isCard ?card)
)

(<= (lackingBrick ?p ?card ?lacking)
	(true (owns brick ?p ?owned))
	(resourceCost ?card brick ?cost)
	(sub ?cost ?owned ?lacking)
)
(<= (lackingBrick ?p ?card 0)
	(not (resourceCost ?card brick ?cost))
	(role ?p)
	(isCard ?card)
)

(<= (lackingCloth ?p ?card ?lacking)
	(true (owns cloth ?p ?owned))
	(resourceCost ?card cloth ?cost)
	(sub ?cost ?owned ?lacking)
)
(<= (lackingCloth ?p ?card 0)
	(not (resourceCost ?card cloth ?cost))
	(role ?p)
	(isCard ?card)
)

(<= (lackingGlass ?p ?card ?lacking)
	(true (owns glass ?p ?owned))
	(resourceCost ?card glass ?cost)
	(sub ?cost ?owned ?lacking)
)
(<= (lackingGlass ?p ?card 0)
	(not (resourceCost ?card glass ?cost))
	(role ?p)
	(isCard ?card)
)

(<= (lackingScript ?p ?card ?lacking)
	(true (owns script ?p ?owned))
	(resourceCost ?card script ?cost)
	(sub ?cost ?owned ?lacking)
)
(<= (lackingScript ?p ?card 0)
	(not (resourceCost ?card script ?cost))
	(role ?p)
	(isCard ?card)
)


(<= (craftAfford ?p 0)
	(role ?p)
)
(<= (craftAfford ?p 1)
	(true (board ?p forum))
)

(<= (resourceAfford ?p ?timber ?clay)
	(timberLacking ?p ?timber 0)
	(clayLacking ?p ?clay 0)
)
(<= (resourceAfford ?p ?timber ?clay)
	(timberLacking ?p ?timber 1)
	(clayLacking ?p ?clay 0)
	(true (board ?p caravansery))
)
(<= (resourceAfford ?p ?timber ?clay)
	(timberLacking ?p ?timber 0)
	(clayLacking ?p ?clay 1)
	(true (board ?p caravansery))
)

(<= (timberLacking ?p ?cost ?cost)
	(not (true (board ?p timberYard)))
	(role ?p)
	(number ?cost)
)
(<= (timberLacking ?p ?cost ?lack)
	(true (board ?p timberYard))
	(sub ?cost 1 ?lack)
)
(<= (clayLacking ?p ?cost ?cost)
	(not (true (board ?p clayPit)))
	(role ?p)
	(number ?cost)
)
(<= (clayLacking ?p ?cost ?lack)
	(true (board ?p clayPit))
	(sub ?cost 1 ?lack)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; STATIC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(firstPlayer p1)
(nextPlayer p1 p2)
(nextPlayer p2 p3)
(nextPlayer p3 p1)

(startHandSize 7)
(endRound 6) 

; add x y z := x+y == z
(<= (add 0 ?x ?x)
	(number ?x)
)
(<= (add ?x 0 ?x)
	(number ?x)
)
(<= (add ?x ?y ?sum)
	(succ ?x2 ?x)
	(succ ?y ?y2)
	(add ?x2 ?y2 ?sum)
)

; add x y z sum := x+y+z == sum
(<= (add ?x ?y ?z ?sum)
	(add ?x ?y ?partial)
	(add ?partial ?z ?sum)
)

; sub x y z := x-y == z 
(<= (sub ?x 0 ?x)
	(number ?x)
)
(<= (sub 0 ?x 0)
	(number ?x)
)
(<= (sub ?x ?y ?result)
	(succ ?x2 ?x)
	(succ ?y2 ?y)
	(sub ?x2 ?y2 ?result)
)
 
; div x y z := x // y == z
(<= (div 0 ?x 0)
	(number ?x)
)
(<= (div ?x ?y 0)
	(gt ?y ?x)
)
(<= (div ?x ?y ?result)
	(gt ?x ?y)
	(sub ?x ?y ?z)
	(gte ?z ?y)
	(div ?z ?y ?cumsum)
	(add ?cumsum 1 ?result)
)
(<= (div ?x ?y 1)
	(gte ?x ?y)
	(sub ?x ?y ?z)
	(gt ?y ?z)
)

; multi x y z := x * y == z
(<= (multi ?x 1 ?x)
	(number ?x)
)
(<= (multi 1 ?x ?x)
	(number ?x)
)
(<= (multi ?x ?y ?result)
	(succ ?z ?y)
	(multi ?x ?z ?cumsum)
	(add ?cumsum ?x ?result)
)
(<= (multi 0 ?x 0)
	(number ?x)
)
(<= (multi ?x 0 0)
	(number ?x)
)

; gt x y := x > y 
(<= (gt ?x ?y)
	(succ ?y ?x)
)
(<= (gt ?x ?y)
	(succ ?y ?z)
	(gt ?x ?z)
)

; gte x y := x <= y 
(<= (gte ?x ?x)
	(number ?x)
)
(<= (gte ?x ?y)
	(gt ?x ?y)
)

(<= (number ?x)
	(succ ?x ?y)
)
(<= (number ?x)
	(succ ?y ?x)
)

(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50) 
(succ 50 51)
(succ 51 52)
(succ 52 53)
(succ 53 54)
(succ 54 55)
(succ 55 56)
(succ 56 57)
(succ 57 58)
(succ 58 59)
(succ 59 60)
